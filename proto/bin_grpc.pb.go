// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: bin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_Send_Feedback_FullMethodName        = "/proto.RPC/send_Feedback"
	RPC_Report_FullMethodName               = "/proto.RPC/report"
	RPC_SetFav_FullMethodName               = "/proto.RPC/set_fav"
	RPC_GetFav_FullMethodName               = "/proto.RPC/get_fav"
	RPC_AddBin_FullMethodName               = "/proto.RPC/add_bin"
	RPC_Set_List_FullMethodName             = "/proto.RPC/set_List"
	RPC_Get_List_FullMethodName             = "/proto.RPC/get_List"
	RPC_Stat_FullMethodName                 = "/proto.RPC/stat"
	RPC_DeleteHistory_FullMethodName        = "/proto.RPC/delete_history"
	RPC_GetHistory_FullMethodName           = "/proto.RPC/get_history"
	RPC_GetImage_FullMethodName             = "/proto.RPC/GetImage"
	RPC_Find_Bin_FullMethodName             = "/proto.RPC/find_Bin"
	RPC_Lookup_FullMethodName               = "/proto.RPC/lookup"
	RPC_BulkLookup_FullMethodName           = "/proto.RPC/bulk_lookup"
	RPC_DynamicFilter_FullMethodName        = "/proto.RPC/DynamicFilter"
	RPC_DynamicBanks_FullMethodName         = "/proto.RPC/DynamicBanks"
	RPC_GetToken_FullMethodName             = "/proto.RPC/get_token"
	RPC_IsPremium_FullMethodName            = "/proto.RPC/is_premium"
	RPC_GetAccount_FullMethodName           = "/proto.RPC/get_account"
	RPC_Lookup_6DigitBin_FullMethodName     = "/proto.RPC/lookup_6digit_bin"
	RPC_Find_6DigitBin_FullMethodName       = "/proto.RPC/find_6digit_bin"
	RPC_DynamicFilter_6Digit_FullMethodName = "/proto.RPC/dynamic_filter_6digit"
	RPC_DynamicBanks_6Digit_FullMethodName  = "/proto.RPC/dynamic_banks_6digit"
	RPC_Log_FullMethodName                  = "/proto.RPC/log"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	Send_Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*Message, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*Message, error)
	SetFav(ctx context.Context, in *Fav, opts ...grpc.CallOption) (*Message, error)
	GetFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*FavList, error)
	AddBin(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*Message, error)
	Set_List(ctx context.Context, in *Save, opts ...grpc.CallOption) (*Message, error)
	Get_List(ctx context.Context, in *Save, opts ...grpc.CallOption) (*SaveList, error)
	Stat(ctx context.Context, in *StatReq, opts ...grpc.CallOption) (*StatResponse, error)
	DeleteHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*Message, error)
	GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	Find_Bin(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*BinList, error)
	Lookup(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*Bin, error)
	BulkLookup(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (RPC_BulkLookupClient, error)
	DynamicFilter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TypeResponse, error)
	DynamicBanks(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*IssuerResponse, error)
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	IsPremium(ctx context.Context, in *IsPremiumRequest, opts ...grpc.CallOption) (*IsPremiumResponse, error)
	// deprecated
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// removed further
	Lookup_6DigitBin(ctx context.Context, in *Bin6DigitRequest, opts ...grpc.CallOption) (*Bin6Digit, error)
	Find_6DigitBin(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*BinList6Digit, error)
	DynamicFilter_6Digit(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*TypeResponse, error)
	DynamicBanks_6Digit(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*IssuerResponse, error)
	Log(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*Message, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Send_Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_Send_Feedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_Report_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SetFav(ctx context.Context, in *Fav, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_SetFav_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*FavList, error) {
	out := new(FavList)
	err := c.cc.Invoke(ctx, RPC_GetFav_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) AddBin(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_AddBin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Set_List(ctx context.Context, in *Save, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_Set_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Get_List(ctx context.Context, in *Save, opts ...grpc.CallOption) (*SaveList, error) {
	out := new(SaveList)
	err := c.cc.Invoke(ctx, RPC_Get_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Stat(ctx context.Context, in *StatReq, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, RPC_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_DeleteHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, RPC_GetHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, RPC_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Find_Bin(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*BinList, error) {
	out := new(BinList)
	err := c.cc.Invoke(ctx, RPC_Find_Bin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Lookup(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*Bin, error) {
	out := new(Bin)
	err := c.cc.Invoke(ctx, RPC_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) BulkLookup(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (RPC_BulkLookupClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[0], RPC_BulkLookup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCBulkLookupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_BulkLookupClient interface {
	Recv() (*Bin, error)
	grpc.ClientStream
}

type rPCBulkLookupClient struct {
	grpc.ClientStream
}

func (x *rPCBulkLookupClient) Recv() (*Bin, error) {
	m := new(Bin)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) DynamicFilter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TypeResponse, error) {
	out := new(TypeResponse)
	err := c.cc.Invoke(ctx, RPC_DynamicFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DynamicBanks(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*IssuerResponse, error) {
	out := new(IssuerResponse)
	err := c.cc.Invoke(ctx, RPC_DynamicBanks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, RPC_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) IsPremium(ctx context.Context, in *IsPremiumRequest, opts ...grpc.CallOption) (*IsPremiumResponse, error) {
	out := new(IsPremiumResponse)
	err := c.cc.Invoke(ctx, RPC_IsPremium_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, RPC_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Lookup_6DigitBin(ctx context.Context, in *Bin6DigitRequest, opts ...grpc.CallOption) (*Bin6Digit, error) {
	out := new(Bin6Digit)
	err := c.cc.Invoke(ctx, RPC_Lookup_6DigitBin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Find_6DigitBin(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*BinList6Digit, error) {
	out := new(BinList6Digit)
	err := c.cc.Invoke(ctx, RPC_Find_6DigitBin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DynamicFilter_6Digit(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*TypeResponse, error) {
	out := new(TypeResponse)
	err := c.cc.Invoke(ctx, RPC_DynamicFilter_6Digit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DynamicBanks_6Digit(ctx context.Context, in *Search6DigitRequest, opts ...grpc.CallOption) (*IssuerResponse, error) {
	out := new(IssuerResponse)
	err := c.cc.Invoke(ctx, RPC_DynamicBanks_6Digit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Log(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, RPC_Log_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	Send_Feedback(context.Context, *FeedbackRequest) (*Message, error)
	Report(context.Context, *ReportRequest) (*Message, error)
	SetFav(context.Context, *Fav) (*Message, error)
	GetFav(context.Context, *FavRequest) (*FavList, error)
	AddBin(context.Context, *ReportRequest) (*Message, error)
	Set_List(context.Context, *Save) (*Message, error)
	Get_List(context.Context, *Save) (*SaveList, error)
	Stat(context.Context, *StatReq) (*StatResponse, error)
	DeleteHistory(context.Context, *HistoryRequest) (*Message, error)
	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	GetImage(context.Context, *ImageRequest) (*ImageResponse, error)
	Find_Bin(context.Context, *SearchRequest) (*BinList, error)
	Lookup(context.Context, *BinRequest) (*Bin, error)
	BulkLookup(*BulkRequest, RPC_BulkLookupServer) error
	DynamicFilter(context.Context, *SearchRequest) (*TypeResponse, error)
	DynamicBanks(context.Context, *SearchRequest) (*IssuerResponse, error)
	GetToken(context.Context, *TokenRequest) (*TokenResponse, error)
	IsPremium(context.Context, *IsPremiumRequest) (*IsPremiumResponse, error)
	// deprecated
	GetAccount(context.Context, *AccountRequest) (*AccountResponse, error)
	// removed further
	Lookup_6DigitBin(context.Context, *Bin6DigitRequest) (*Bin6Digit, error)
	Find_6DigitBin(context.Context, *Search6DigitRequest) (*BinList6Digit, error)
	DynamicFilter_6Digit(context.Context, *Search6DigitRequest) (*TypeResponse, error)
	DynamicBanks_6Digit(context.Context, *Search6DigitRequest) (*IssuerResponse, error)
	Log(context.Context, *BinRequest) (*Message, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) Send_Feedback(context.Context, *FeedbackRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send_Feedback not implemented")
}
func (UnimplementedRPCServer) Report(context.Context, *ReportRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedRPCServer) SetFav(context.Context, *Fav) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFav not implemented")
}
func (UnimplementedRPCServer) GetFav(context.Context, *FavRequest) (*FavList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFav not implemented")
}
func (UnimplementedRPCServer) AddBin(context.Context, *ReportRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBin not implemented")
}
func (UnimplementedRPCServer) Set_List(context.Context, *Save) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set_List not implemented")
}
func (UnimplementedRPCServer) Get_List(context.Context, *Save) (*SaveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_List not implemented")
}
func (UnimplementedRPCServer) Stat(context.Context, *StatReq) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedRPCServer) DeleteHistory(context.Context, *HistoryRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistory not implemented")
}
func (UnimplementedRPCServer) GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedRPCServer) GetImage(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedRPCServer) Find_Bin(context.Context, *SearchRequest) (*BinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find_Bin not implemented")
}
func (UnimplementedRPCServer) Lookup(context.Context, *BinRequest) (*Bin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedRPCServer) BulkLookup(*BulkRequest, RPC_BulkLookupServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkLookup not implemented")
}
func (UnimplementedRPCServer) DynamicFilter(context.Context, *SearchRequest) (*TypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicFilter not implemented")
}
func (UnimplementedRPCServer) DynamicBanks(context.Context, *SearchRequest) (*IssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicBanks not implemented")
}
func (UnimplementedRPCServer) GetToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedRPCServer) IsPremium(context.Context, *IsPremiumRequest) (*IsPremiumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPremium not implemented")
}
func (UnimplementedRPCServer) GetAccount(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedRPCServer) Lookup_6DigitBin(context.Context, *Bin6DigitRequest) (*Bin6Digit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup_6DigitBin not implemented")
}
func (UnimplementedRPCServer) Find_6DigitBin(context.Context, *Search6DigitRequest) (*BinList6Digit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find_6DigitBin not implemented")
}
func (UnimplementedRPCServer) DynamicFilter_6Digit(context.Context, *Search6DigitRequest) (*TypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicFilter_6Digit not implemented")
}
func (UnimplementedRPCServer) DynamicBanks_6Digit(context.Context, *Search6DigitRequest) (*IssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicBanks_6Digit not implemented")
}
func (UnimplementedRPCServer) Log(context.Context, *BinRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_Send_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Send_Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Send_Feedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Send_Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_SetFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fav)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SetFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_SetFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SetFav(ctx, req.(*Fav))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_GetFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).GetFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_GetFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).GetFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_AddBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).AddBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_AddBin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).AddBin(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Set_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Save)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Set_List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Set_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Set_List(ctx, req.(*Save))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Get_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Save)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Get_List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Get_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Get_List(ctx, req.(*Save))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Stat(ctx, req.(*StatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).GetHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).GetImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Find_Bin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Find_Bin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Find_Bin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Find_Bin(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Lookup(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_BulkLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BulkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).BulkLookup(m, &rPCBulkLookupServer{stream})
}

type RPC_BulkLookupServer interface {
	Send(*Bin) error
	grpc.ServerStream
}

type rPCBulkLookupServer struct {
	grpc.ServerStream
}

func (x *rPCBulkLookupServer) Send(m *Bin) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_DynamicFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DynamicFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DynamicFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DynamicFilter(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DynamicBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DynamicBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DynamicBanks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DynamicBanks(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_IsPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).IsPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_IsPremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).IsPremium(ctx, req.(*IsPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Lookup_6DigitBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bin6DigitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Lookup_6DigitBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Lookup_6DigitBin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Lookup_6DigitBin(ctx, req.(*Bin6DigitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Find_6DigitBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search6DigitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Find_6DigitBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Find_6DigitBin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Find_6DigitBin(ctx, req.(*Search6DigitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DynamicFilter_6Digit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search6DigitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DynamicFilter_6Digit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DynamicFilter_6Digit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DynamicFilter_6Digit(ctx, req.(*Search6DigitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DynamicBanks_6Digit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search6DigitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DynamicBanks_6Digit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DynamicBanks_6Digit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DynamicBanks_6Digit(ctx, req.(*Search6DigitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Log(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_Feedback",
			Handler:    _RPC_Send_Feedback_Handler,
		},
		{
			MethodName: "report",
			Handler:    _RPC_Report_Handler,
		},
		{
			MethodName: "set_fav",
			Handler:    _RPC_SetFav_Handler,
		},
		{
			MethodName: "get_fav",
			Handler:    _RPC_GetFav_Handler,
		},
		{
			MethodName: "add_bin",
			Handler:    _RPC_AddBin_Handler,
		},
		{
			MethodName: "set_List",
			Handler:    _RPC_Set_List_Handler,
		},
		{
			MethodName: "get_List",
			Handler:    _RPC_Get_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _RPC_Stat_Handler,
		},
		{
			MethodName: "delete_history",
			Handler:    _RPC_DeleteHistory_Handler,
		},
		{
			MethodName: "get_history",
			Handler:    _RPC_GetHistory_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _RPC_GetImage_Handler,
		},
		{
			MethodName: "find_Bin",
			Handler:    _RPC_Find_Bin_Handler,
		},
		{
			MethodName: "lookup",
			Handler:    _RPC_Lookup_Handler,
		},
		{
			MethodName: "DynamicFilter",
			Handler:    _RPC_DynamicFilter_Handler,
		},
		{
			MethodName: "DynamicBanks",
			Handler:    _RPC_DynamicBanks_Handler,
		},
		{
			MethodName: "get_token",
			Handler:    _RPC_GetToken_Handler,
		},
		{
			MethodName: "is_premium",
			Handler:    _RPC_IsPremium_Handler,
		},
		{
			MethodName: "get_account",
			Handler:    _RPC_GetAccount_Handler,
		},
		{
			MethodName: "lookup_6digit_bin",
			Handler:    _RPC_Lookup_6DigitBin_Handler,
		},
		{
			MethodName: "find_6digit_bin",
			Handler:    _RPC_Find_6DigitBin_Handler,
		},
		{
			MethodName: "dynamic_filter_6digit",
			Handler:    _RPC_DynamicFilter_6Digit_Handler,
		},
		{
			MethodName: "dynamic_banks_6digit",
			Handler:    _RPC_DynamicBanks_6Digit_Handler,
		},
		{
			MethodName: "log",
			Handler:    _RPC_Log_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "bulk_lookup",
			Handler:       _RPC_BulkLookup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bin.proto",
}
